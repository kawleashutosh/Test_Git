?sample
#Prepare a model for glass classification using KNN
library("class")
library("gmodels")
?gmodels
getwd()
glassdata <- read.csv("glass.csv")
n <-nrow(glassdata) #214
ncol(glassdata)#10columns
getwd()
glassdata <- read.csv(file.choose())
n <-nrow(glassdata) #214
n <-nrow(glassdata) #214
ncol(glassdata)#10columns
#verify wether na values are present in the dataset
sum(is.na(glassdata)) # 0 na values
#pairs(glassdata)
summary(glassdata)
#creating a dataset with train and Test .
n1 <- ceiling(0.8*n) #172
train <- sample(1:n,n1)
train_glassdata <- glassdata[train,]
test_glassdata <- glassdata[-train,]
levels(factor(train_glassdata$Type))# "1" "2" "3" "5" "6" "7"
levels(factor(test_glassdata$Type))# "1" "2" "3" "5" "6" "7"
levels(factor(glassdata$Type))# "1" "2" "3" "5" "6" "7"
#output to be classified is #type of cement
knn_classifier_Cement1 <- knn(train = train_glassdata,
test = test_glassdata,
cl = train_glassdata$Type,
k=1)
#length(knn_classifier_Cement1)
nrow(test_glassdata$Type)
table_test <-CrossTable( x = test_glassdata$Type,
y = knn_classifier_Cement1,
chisq = FALSE)
#finding test accuracy of the model :
sum(diag(table_test))/42
#finding test accuracy of the model :
(16+9+5+2+1+9)/42
knn_classifier_Cement_train <- knn(train = train_glassdata,
test = train_glassdata,
cl = train_glassdata$Type,
k=1)
table_train <-CrossTable( x = test_glassdata$Type,
y = knn_classifier_Cement_train,
chisq = FALSE)
k=1)
table_train <-CrossTable( x = train_glassdata$Type,
y = knn_classifier_Cement_train,
chisq = FALSE)
?CrossTable
table_train <-CrossTable( x = train_glassdata$Type,
y = knn_classifier_Cement_train,
chisq = FALSE)
table_test <-CrossTable( x = test_glassdata$Type,
y = knn_classifier_Cement1,
chisq = FALSE)
#install.packages("arules")
#install.packages("arulesViz")
install.packages(fpc)
install.packages(c("caret", "inum", "ipred", "lmtest"))
install.packages("fpca")
library(arulesViz)
library("arulesViz", lib.loc="~/R/win-library/3.5")
install.packages("fpc")
install.packages("lmtest")
library(arulesViz)
install.packages("installr")
library(installr)
updateR()
library(arulesViz)
install.packages("arules")
hist(get_movieRules)
plot(get_movieRules, method = "grouped")
setwd("D:\\Data Science Excel R\\DataScience Assignments\\Association Rules")
movies <- read.csv("my_movies.csv")
ncol(movies) #15 columns
nrow(movies) #10
movies
movies[1,]
#getting transaction in binary matrix format .
movies_bm <- movies[,6:15] # getting only columns which are in binary matrix format ..
# install.packages("arules")
# install.packages("arulesViz")
# install.packages(fpc)
#install.packages("arulesViz", dependencies = TRUE)
library(arulesViz)
library(arules) # contains apriori algorithm
ncol(movies_bm)
#generateMovieRules <- apriori()
# ?apriori
get_movieRules <- apriori(as.matrix(movies_bm),parameter = list(support = .2, confidence = 0.3))
# when min length is not specifies its taken as 1 ....
movies_bm
summary(get_movieRules)
inspect(sort(get_movieRules, by="lift"))
plot(get_movieRules)
hist(get_movieRules)
plot(get_movieRules, method = "grouped")
get_movieRules2 <- apriori(as.matrix(movies_bm),parameter = list(support = .4, confidence = 0.3))
inspect(get_movieRules2)
inspect(sort(get_movieRules, by="lift"))
inspect(sort(get_movieRules2, by ="lift)")
inspect(sort(get_movieRules2, by ="lift)"))
inspect(sort(get_movieRules2, by="lift"))
get_movieRules2 <- apriori(as.matrix(movies_bm),parameter = list(support = .6, confidence = 0.3))
inspect(sort(get_movieRules2, by="lift"))
get_movieRules2 <- apriori(as.matrix(movies_bm),parameter = list(support = .4, confidence = 0.3),minlen=2)
get_movieRules2 <- apriori(as.matrix(movies_bm),parameter = list(support = .4, confidence = 0.3),minlen=2)
#by chaning minlenth =2
?minlen
#by chaning minlenth =2
?apriori
get_movieRules2 <- apriori(as.matrix(movies_bm),parameter = list(support = .4, confidence = 0.3,minlen=2))
inspect(sort(get_movieRules2, by="lift"))
plot(get_movieRules2)
plot(get_movieRules2, method = "grouped")
# {Sixth.Sense,Patriot}   => {Gladiator}
?plot
plot(get_movieRules,method ='scatterplot')
plot(get_movieRules,method ='two-key plot')
plot(get_movieRules,method ='matrix')
plot(get_movieRules,method ='graph')
plot(get_movieRules,method ='matrix')
library("class")
library("gmodels")
install.packages(class)
install.packages(gmodels)
#Prepare a model for glass classification using KNN
install.packages(class)
install.packages("class")
install.packages(gmodels)
install.packages("gmodels")
library("gmodels", lib.loc="~/R/win-library/3.6")
library("class", lib.loc="~/R/win-library/3.6")
library("class")
library("gmodels")
glassdata <- read.csv(file.choose())
n <-nrow(glassdata) #214
ncol(glassdata)#10columns
#verify wether na values are present in the dataset
sum(is.na(glassdata)) # 0 na values
#pairs(glassdata)
summary(glassdata)
#pairs(glassdata)
summary(glassdata)
n
glassdata
setwd("D:\\Data Science Excel R\\DataScience Assignments\\KNN")
ZooAnimals <- read.csv(file ="Zoo.csv") #DataSet -> Zoo.csv
#get Na value present in dataset
sum(is.na(ZooAnimals)) # 0 since no columns are having values as NA
# get column name and rownumber for the dataset provided..
ncol(ZooAnimals) #18 columns
nrow(ZooAnimals) #101 rows, observations
summary(ZooAnimals)
